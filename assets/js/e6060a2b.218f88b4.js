"use strict";(self.webpackChunkh3_website=self.webpackChunkh3_website||[]).push([[7545],{5680:(e,n,l)=>{l.d(n,{xA:()=>p,yg:()=>y});var a=l(6540);function t(e,n,l){return n in e?Object.defineProperty(e,n,{value:l,enumerable:!0,configurable:!0,writable:!0}):e[n]=l,e}function o(e,n){var l=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),l.push.apply(l,a)}return l}function r(e){for(var n=1;n<arguments.length;n++){var l=null!=arguments[n]?arguments[n]:{};n%2?o(Object(l),!0).forEach((function(n){t(e,n,l[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(l)):o(Object(l)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(l,n))}))}return e}function s(e,n){if(null==e)return{};var l,a,t=function(e,n){if(null==e)return{};var l,a,t={},o=Object.keys(e);for(a=0;a<o.length;a++)l=o[a],n.indexOf(l)>=0||(t[l]=e[l]);return t}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)l=o[a],n.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(t[l]=e[l])}return t}var i=a.createContext({}),u=function(e){var n=a.useContext(i),l=n;return e&&(l="function"==typeof e?e(n):r(r({},n),e)),l},p=function(e){var n=u(e.components);return a.createElement(i.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},g=a.forwardRef((function(e,n){var l=e.components,t=e.mdxType,o=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),g=u(l),y=t,d=g["".concat(i,".").concat(y)]||g[y]||c[y]||o;return l?a.createElement(d,r(r({ref:n},p),{},{components:l})):a.createElement(d,r({ref:n},p))}));function y(e,n){var l=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var o=l.length,r=new Array(o);r[0]=g;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s.mdxType="string"==typeof e?e:t,r[1]=s;for(var u=2;u<o;u++)r[u]=l[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,l)}g.displayName="MDXCreateElement"},9365:(e,n,l)=>{l.d(n,{A:()=>r});var a=l(6540),t=l(53);const o="tabItem_Ymn6";function r(e){let{children:n,hidden:l,className:r}=e;return a.createElement("div",{role:"tabpanel",className:(0,t.A)(o,r),hidden:l},n)}},1470:(e,n,l)=>{l.d(n,{A:()=>x});var a=l(8168),t=l(6540),o=l(53),r=l(3104),s=l(2681),i=l(7485),u=l(1682),p=l(9466);function c(e){return function(e){var n,l;return null!=(n=null==(l=t.Children.map(e,(e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:l.filter(Boolean))?n:[]}(e).map((e=>{let{props:{value:n,label:l,attributes:a,default:t}}=e;return{value:n,label:l,attributes:a,default:t}}))}function g(e){const{values:n,children:l}=e;return(0,t.useMemo)((()=>{const e=null!=n?n:c(l);return function(e){const n=(0,u.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error('Docusaurus error: Duplicate values "'+n.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[n,l])}function y(e){let{value:n,tabValues:l}=e;return l.some((e=>e.value===n))}function d(e){let{queryString:n=!1,groupId:l}=e;const a=(0,s.W6)(),o=function(e){let{queryString:n=!1,groupId:l}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!l)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=l?l:null}({queryString:n,groupId:l});return[(0,i.aZ)(o),(0,t.useCallback)((e=>{if(!o)return;const n=new URLSearchParams(a.location.search);n.set(o,e),a.replace({...a.location,search:n.toString()})}),[o,a])]}function m(e){const{defaultValue:n,queryString:l=!1,groupId:a}=e,o=g(e),[r,s]=(0,t.useState)((()=>function(e){var n;let{defaultValue:l,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(l){if(!y({value:l,tabValues:a}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+l+'" but none of its children has the corresponding value. Available values are: '+a.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return l}const t=null!=(n=a.find((e=>e.default)))?n:a[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:o}))),[i,u]=d({queryString:l,groupId:a}),[c,m]=function(e){let{groupId:n}=e;const l=function(e){return e?"docusaurus.tab."+e:null}(n),[a,o]=(0,p.Dv)(l);return[a,(0,t.useCallback)((e=>{l&&o.set(e)}),[l,o])]}({groupId:a}),f=(()=>{const e=null!=i?i:c;return y({value:e,tabValues:o})?e:null})();(0,t.useLayoutEffect)((()=>{f&&s(f)}),[f]);return{selectedValue:r,selectValue:(0,t.useCallback)((e=>{if(!y({value:e,tabValues:o}))throw new Error("Can't select invalid tab value="+e);s(e),u(e),m(e)}),[u,m,o]),tabValues:o}}var f=l(2303);const h="tabList__CuJ",v="tabItem_LNqP";function b(e){let{className:n,block:l,selectedValue:s,selectValue:i,tabValues:u}=e;const p=[],{blockElementScrollPositionUntilNextRender:c}=(0,r.a_)(),g=e=>{const n=e.currentTarget,l=p.indexOf(n),a=u[l].value;a!==s&&(c(n),i(a))},y=e=>{var n;let l=null;switch(e.key){case"Enter":g(e);break;case"ArrowRight":{var a;const n=p.indexOf(e.currentTarget)+1;l=null!=(a=p[n])?a:p[0];break}case"ArrowLeft":{var t;const n=p.indexOf(e.currentTarget)-1;l=null!=(t=p[n])?t:p[p.length-1];break}}null==(n=l)||n.focus()};return t.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":l},n)},u.map((e=>{let{value:n,label:l,attributes:r}=e;return t.createElement("li",(0,a.A)({role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,key:n,ref:e=>p.push(e),onKeyDown:y,onClick:g},r,{className:(0,o.A)("tabs__item",v,null==r?void 0:r.className,{"tabs__item--active":s===n})}),null!=l?l:n)})))}function T(e){let{lazy:n,children:l,selectedValue:a}=e;const o=(Array.isArray(l)?l:[l]).filter(Boolean);if(n){const e=o.find((e=>e.props.value===a));return e?(0,t.cloneElement)(e,{className:"margin-top--md"}):null}return t.createElement("div",{className:"margin-top--md"},o.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==a}))))}function N(e){const n=m(e);return t.createElement("div",{className:(0,o.A)("tabs-container",h)},t.createElement(b,(0,a.A)({},e,n)),t.createElement(T,(0,a.A)({},e,n)))}function x(e){const n=(0,f.A)();return t.createElement(N,(0,a.A)({key:String(n)},e))}},9096:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>y,frontMatter:()=>s,metadata:()=>u,toc:()=>c});var a=l(8168),t=(l(6540),l(5680)),o=l(1470),r=l(9365);const s={id:"regions",title:"Region functions",sidebar_label:"Regions",slug:"/api/regions"},i=void 0,u={unversionedId:"api/regions",id:"api/regions",title:"Region functions",description:"These functions convert H3 indexes to and from polygonal areas.",source:"@site/docs/api/regions.mdx",sourceDirName:"api",slug:"/api/regions",permalink:"/docs/api/regions",draft:!1,editUrl:"https://github.com/uber/h3/edit/master/website/docs/api/regions.mdx",tags:[],version:"current",frontMatter:{id:"regions",title:"Region functions",sidebar_label:"Regions",slug:"/api/regions"},sidebar:"someSidebar",previous:{title:"Hierarchy",permalink:"/docs/api/hierarchy"},next:{title:"Directed edges",permalink:"/docs/api/uniedge"}},p={},c=[{value:"polygonToCells",id:"polygontocells",level:2},{value:"maxPolygonToCellsSize",id:"maxpolygontocellssize",level:2},{value:"cellsToLinkedMultiPolygon / cellsToMultiPolygon",id:"cellstolinkedmultipolygon--cellstomultipolygon",level:2},{value:"destroyLinkedMultiPolygon",id:"destroylinkedmultipolygon",level:2}],g={toc:c};function y(e){let{components:n,...l}=e;return(0,t.yg)("wrapper",(0,a.A)({},g,l,{components:n,mdxType:"MDXLayout"}),(0,t.yg)("p",null,"These functions convert H3 indexes to and from polygonal areas."),(0,t.yg)("h2",{id:"polygontocells"},"polygonToCells"),(0,t.yg)("p",null,"Each binding's version of ",(0,t.yg)("inlineCode",{parentName:"p"},"polygonToCells")," takes as input a GeoJSON-like data\nstructure describing a polygon (i.e., an outer ring and optional holes) and\na target cell resolution.\nIt produces a collection of cells that are contained within the polygon."),(0,t.yg)("p",null,"Containment is determined by centroids of the cells, so that a partitioning\nof polygons (covering an area without overlaps) will result in\na partitioning of H3 cells."),(0,t.yg)(o.A,{groupId:"language",defaultValue:"c",values:[{label:"C",value:"c"},{label:"Java",value:"java"},{label:"JavaScript (Live)",value:"javascript"},{label:"Python",value:"python"},{label:"Shell",value:"shell"}],mdxType:"Tabs"},(0,t.yg)(r.A,{value:"c",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-c"},"H3Error polygonToCells(const GeoPolygon *geoPolygon, int res, uint32_t flags, H3Index *out);\n")),(0,t.yg)("p",null,"In C, ",(0,t.yg)("inlineCode",{parentName:"p"},"polygonToCells")," takes a ",(0,t.yg)("inlineCode",{parentName:"p"},"GeoPolygon")," struct and preallocated,\nzeroed memory, and fills it with the covering cells."),(0,t.yg)("p",null,"Returns 0 (",(0,t.yg)("inlineCode",{parentName:"p"},"E_SUCCESS"),") on success.")),(0,t.yg)(r.A,{value:"java",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-java"},"List<Long> polygonToCells(List<LatLng> points, List<List<LatLng>> holes, int res);\nList<String> polygonToCellAddresses(List<LatLng> points, List<List<LatLng>> holes, int res);\n"))),(0,t.yg)(r.A,{value:"javascript",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-js"},"h3.polygonToCells(polygon, res, isGeoJson)\n")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-js",metastring:"live",live:!0},"function example() {\n    const polygon = [\n        [37.813318999983238, -122.4089866999972145],\n        [37.7198061999978478, -122.3544736999993603],\n        [37.8151571999998453, -122.4798767000009008]\n    ];\n    const res = 7;\n    return h3.polygonToCells(polygon, res);\n}\n"))),(0,t.yg)(r.A,{value:"python",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-py"},"h3.polygon_to_cells(h3shape, res)\nh3.h3shape_to_cells(h3shape, res)\n")),(0,t.yg)("p",null,"In Python, ",(0,t.yg)("inlineCode",{parentName:"p"},"h3shape_to_cells")," takes an ",(0,t.yg)("inlineCode",{parentName:"p"},"H3Shape")," object\n(",(0,t.yg)("inlineCode",{parentName:"p"},"LatLngPoly")," or ",(0,t.yg)("inlineCode",{parentName:"p"},"LatLngMultiPoly"),").\nNote that ",(0,t.yg)("inlineCode",{parentName:"p"},"polygon_to_cells")," is an alias for ",(0,t.yg)("inlineCode",{parentName:"p"},"h3shape_to_cells"),".\nFor more info, see the ",(0,t.yg)("a",{parentName:"p",href:"https://uber.github.io/h3-py/api_quick.html#polygon-interface"},(0,t.yg)("inlineCode",{parentName:"a"},"h3-py")," docs"),".")),(0,t.yg)(r.A,{value:"shell",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-sh"},"$ h3 polygonToCells --help\nh3: Converts a polygon (array of lat, lng points, or array of arrays of lat, lng points) into a set of covering cells at the specified resolution\nH3 4.1.0\n\n    polygonToCells  Converts a polygon (array of lat, lng points, or array of arrays of lat, lng points) into a set of covering cells at the specified resolution\n    -h, --help  Show this help message.\n    -i, --file <FILENAME>   The file to load the polygon from. Use -- to read from stdin.\n    -p, --polygon <POLYGON> The polygon to convert. Up to 1500 characters.\n    -r, --resolution <res>  Required. Resolution, 0-15 inclusive, that the polygon should be converted to.\n    -f, --format <FMT>  'json' for [\"CELL\", ...], 'newline' for CELL\\n... (Default: json)\n")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-bash"},'$ h3 polygonToCells -r 7 -p "[[37.813318999983238, -122.4089866999972145], [37.7198061999978478, -122.3544736999993603], [37.8151571999998453, -122.4798767000009008]]"\n[ "87283082bffffff", "872830870ffffff", "872830820ffffff", "87283082effffff", "872830828ffffff", "87283082affffff", "872830876ffffff" ]\n')))),(0,t.yg)("h2",{id:"maxpolygontocellssize"},"maxPolygonToCellsSize"),(0,t.yg)("p",null,"Provides an upper bound on the number of cells needed for memory allocation\npurposes when computing ",(0,t.yg)("inlineCode",{parentName:"p"},"polygonToCells")," on the given GeoJSON-like data structure."),(0,t.yg)(o.A,{groupId:"language",defaultValue:"c",values:[{label:"C",value:"c"},{label:"Java",value:"java"},{label:"JavaScript (Live)",value:"javascript"},{label:"Python",value:"python"},{label:"Shell",value:"shell"}],mdxType:"Tabs"},(0,t.yg)(r.A,{value:"c",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-c"},"H3Error maxPolygonToCellsSize(const GeoPolygon *geoPolygon, int res, uint32_t flags, int64_t *out);\n")),(0,t.yg)("p",null,"Returns 0 (",(0,t.yg)("inlineCode",{parentName:"p"},"E_SUCCESS"),") on success.")),(0,t.yg)(r.A,{value:"java",mdxType:"TabItem"},(0,t.yg)("admonition",{type:"note"},(0,t.yg)("p",{parentName:"admonition"},"This function exists for memory management and is not exposed."))),(0,t.yg)(r.A,{value:"javascript",mdxType:"TabItem"},(0,t.yg)("admonition",{type:"note"},(0,t.yg)("p",{parentName:"admonition"},"This function exists for memory management and is not exposed."))),(0,t.yg)(r.A,{value:"python",mdxType:"TabItem"},(0,t.yg)("admonition",{type:"note"},(0,t.yg)("p",{parentName:"admonition"},"This function exists for memory management and is not exposed."))),(0,t.yg)(r.A,{value:"shell",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-sh"},"$ h3 maxPolygonToCellsSize --help\nh3: Returns the maximum number of cells that could be needed to cover the polygon. Will always be equal or more than actually necessary\nH3 4.1.0\n\n    maxPolygonToCellsSize   Returns the maximum number of cells that could be needed to cover the polygon. Will always be equal or more than actually necessary\n    -h, --help  Show this help message.\n    -i, --file <FILENAME>   The file to load the polygon from. Use -- to read from stdin.\n    -p, --polygon <POLYGON> The polygon to convert. Up to 1500 characters.\n    -r, --resolution <res>  Required. Resolution, 0-15 inclusive, that the polygon should be converted to.\n")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-bash"},'$ h3 maxPolygonToCellsSize -r 7 -p "[[37.813318999983238, -122.4089866999972145], [37.7198061999978478, -122.3544736999993603], [37.8151571999998453, -122.4798767000009008]]"\n100\n')))),(0,t.yg)("h2",{id:"cellstolinkedmultipolygon--cellstomultipolygon"},"cellsToLinkedMultiPolygon / cellsToMultiPolygon"),(0,t.yg)("p",null,"Create a GeoJSON-like multi-polygon describing the outline(s) of a set of cells.\nPolygon outlines will follow GeoJSON MultiPolygon order: Each polygon will\nhave one outer loop, which is first in the list, followed by any holes."),(0,t.yg)("p",null,"It is expected that all cells in the set have the same resolution and\nthat the set contains no duplicates. Behavior is undefined if duplicates\nor multiple resolutions are present, and the algorithm may produce\nunexpected or invalid output."),(0,t.yg)(o.A,{groupId:"language",defaultValue:"c",values:[{label:"C",value:"c"},{label:"Java",value:"java"},{label:"JavaScript (Live)",value:"javascript"},{label:"Python",value:"python"},{label:"Shell",value:"shell"}],mdxType:"Tabs"},(0,t.yg)(r.A,{value:"c",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-c"},"H3Error cellsToLinkedMultiPolygon(const H3Index *h3Set, const int numHexes, LinkedGeoPolygon *out);\n")),(0,t.yg)("p",null,"It is the responsibility of the caller to call ",(0,t.yg)("inlineCode",{parentName:"p"},"destroyLinkedPolygon")," on the\npopulated linked geo structure, or the memory for that structure will\nnot be freed."),(0,t.yg)("p",null,"Returns 0 (",(0,t.yg)("inlineCode",{parentName:"p"},"E_SUCCESS"),") on success.")),(0,t.yg)(r.A,{value:"java",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-java"},"List<List<List<LatLng>>> cellsToMultiPolygon(Collection<Long> h3, boolean geoJson);\nList<List<List<LatLng>>> cellAddressesToMultiPolygon(Collection<String> h3Addresses, boolean geoJson);\n"))),(0,t.yg)(r.A,{value:"javascript",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-js"},"h3.cellsToMultiPolygon(cells, geoJson)\n")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-js",metastring:"live",live:!0},"function example() {\n    const cells = ['872830828ffffff', '87283082effffff'];\n    return h3.cellsToMultiPolygon(cells, true);\n}\n"))),(0,t.yg)(r.A,{value:"python",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-py"},"h3.cells_to_h3shape(cells, *, tight=True)\n")),(0,t.yg)("p",null,"Returns an ",(0,t.yg)("inlineCode",{parentName:"p"},"H3Shape")," object:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"If ",(0,t.yg)("inlineCode",{parentName:"li"},"tight=True"),", returns ",(0,t.yg)("inlineCode",{parentName:"li"},"LatLngPoly")," if possible, otherwise ",(0,t.yg)("inlineCode",{parentName:"li"},"LatLngMultiPoly"),"."),(0,t.yg)("li",{parentName:"ul"},"If ",(0,t.yg)("inlineCode",{parentName:"li"},"tight=False"),", always returns a ",(0,t.yg)("inlineCode",{parentName:"li"},"LatLngMultiPoly"),".")),(0,t.yg)("p",null,"For more info, see the ",(0,t.yg)("a",{parentName:"p",href:"https://uber.github.io/h3-py/api_quick.html#polygon-interface"},(0,t.yg)("inlineCode",{parentName:"a"},"h3-py")," docs"),".")),(0,t.yg)(r.A,{value:"shell",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-sh"},"$ h3 cellsToMultiPolygon --help\nh3: Returns a polygon (array of arrays of lat, lng points) for a set of cells\nH3 4.1.0\n\n    cellsToMultiPolygon Returns a polygon (array of arrays of lat, lng points) for a set of cells\n    -h, --help  Show this help message.\n    -i, --file <FILENAME>   The file to load the cells from. Use -- to read from stdin.\n    -c, --cells <CELLS> The cells to convert. Up to 100 cells if provided as hexadecimals with zero padding.\n    -f, --format <FMT>  'json' for [[[[lat, lng],...],...],...] 'wkt' for a WKT MULTIPOLYGON\n")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-bash"},"$ h3 cellsToMultiPolygon -c 872830828ffffff,87283082effffff\n[[[[37.784046, -122.427089], [37.772267, -122.434586], [37.761736, -122.425769], [37.762982, -122.409455], [37.752446, -122.400640], [37.753689, -122.384324], [37.765468, -122.376819], [37.776004, -122.385635], [37.774761, -122.401954], [37.785293, -122.410771]]]]\n")))),(0,t.yg)("h2",{id:"destroylinkedmultipolygon"},"destroyLinkedMultiPolygon"),(0,t.yg)("p",null,"Free all allocated memory for a linked geo structure. The caller is\nresponsible for freeing memory allocated to the input polygon struct."),(0,t.yg)(o.A,{groupId:"language",defaultValue:"c",values:[{label:"C",value:"c"},{label:"Java",value:"java"},{label:"JavaScript (Live)",value:"javascript"},{label:"Python",value:"python"},{label:"Shell",value:"shell"}],mdxType:"Tabs"},(0,t.yg)(r.A,{value:"c",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-c"},"void destroyLinkedMultiPolygon(LinkedGeoPolygon *polygon);\n"))),(0,t.yg)(r.A,{value:"java",mdxType:"TabItem"},(0,t.yg)("admonition",{type:"note"},(0,t.yg)("p",{parentName:"admonition"},"This function exists for memory management and is not exposed."))),(0,t.yg)(r.A,{value:"javascript",mdxType:"TabItem"},(0,t.yg)("admonition",{type:"note"},(0,t.yg)("p",{parentName:"admonition"},"This function exists for memory management and is not exposed."))),(0,t.yg)(r.A,{value:"python",mdxType:"TabItem"},(0,t.yg)("admonition",{type:"note"},(0,t.yg)("p",{parentName:"admonition"},"This function exists for memory management and is not exposed."))),(0,t.yg)(r.A,{value:"shell",mdxType:"TabItem"},(0,t.yg)("admonition",{type:"note"},(0,t.yg)("p",{parentName:"admonition"},"This function exists for memory management and is not exposed.")))))}y.isMDXComponent=!0}}]);